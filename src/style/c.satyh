@import: ../core
@import: default

open Algorithm

module AlgorithmStyleC : sig

  direct +State : [inline-text] block-cmd
  direct +Statex : [inline-text] block-cmd

  direct +If : [inline-text; block-text] block-cmd
  direct +ElsIf : [inline-text; block-text] block-cmd
  direct +Else : [block-text] block-cmd
  direct +EndIf : [] block-cmd

  direct +For : [inline-text; block-text] block-cmd
  direct +ForAll : [inline-text; block-text] block-cmd
  direct +While : [inline-text; block-text] block-cmd
  direct +RepeatUntil : [block-text; inline-text] block-cmd
  direct +Loop : [block-text] block-cmd

  direct +Function : [inline-text; inline-text; block-text] block-cmd
  direct +Procedure : [inline-text; inline-text; block-text] block-cmd

end = struct

  let-block ctx +State it =
    inline-scheme ctx true {#it;\;}

  let-block ctx +Statex it =
    inline-scheme ctx false it

  % conditional branch

  let-block ctx +If cond inner =
    block-scheme ctx
      {\keyword{if}\ (#cond;)\ \{}
      inner
      {}

  let-block ctx +ElsIf cond inner =
    block-scheme ctx
      {\}\ \keyword{else\ if}\ (#cond;)\ \{}
      inner
      {}

  let-block ctx +Else inner =
    block-scheme ctx
      {\}\ \keyword{else}\ \{}
      inner
      {}

  let-block ctx +EndIf =
    inline-scheme ctx true {\}}

  % loop

  let-block ctx +For cond inner =
    block-scheme ctx
      {\keyword{for}\ (#cond;)\ \{}
      inner
      {\}}

  let-block ctx +ForAll cond inner =
    block-scheme ctx
      {\keyword{for\ all}\ (#cond;)\ \{}
      inner
      {\}}

  let-block ctx +While cond inner =
    block-scheme ctx
      {\keyword{while}\ (#cond;)\ \{}
      inner
      {\}}

  let-block ctx +RepeatUntil inner cond =
    block-scheme ctx
      {\keyword{repeat}\ \{}
      inner
      {\}\ \keyword{until}\ (#cond;)\;}

  let-block ctx +Loop inner =
    block-scheme ctx
      {\keyword{loop}\ \{}
      inner
      {\}}

  % functions

  let-block ctx +Function name param inner =
    block-scheme ctx
      {\AlgorithmUtils.textsc{#name;}(#param;)\ \{}
      inner
      {\}}

  let-block ctx +Procedure name param inner =
    block-scheme ctx
      {\AlgorithmUtils.textsc{#name;}(#param;)\ \{}
      inner
      {\}}

end